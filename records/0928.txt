시도해본 것 들

0. 주어진 30초 동안 계속 탐색

1. 초기해 구하는 방법
nearest neighbor greedy
	- 시작점을 왼쪽 위(주어진 첫번째 점)
	- 시작점을 가운데 점

	=> 가운데 점부터 하는 것이 도시의 갯수가 xxx일 때는 더 좋았다.
	=> 도시의 갯수가 xxxx일 때는 시작점을 주어진 첫 도시로 하는게 좋았다.

2. 이웃해 찾는 방법
	- 2-opt
	- 바꿀 2-opt를 고를때 가장 긴 2개를 고르는 방법
	- 바꿀 2-opt를 고를때 길이가 긴 것을 확률적으로 더 많이 뽑는 방법
	- 3-opt

    => 변경한 2-opt들은 성능도 좋지 않고 시간도 오래 걸렸다.
        긴 edge를 고르는 것은 별로 좋지 않은 생각인듯.
	=> 3-opt가 2-opt보다 더 뛰어나나 시간이 더 걸렸다.

3. SA
	- SA
	- tabu (2-opt)
	- tabu (3-opt)
	- tabu + SA

    => tabu (2-opt)가 꾸준하게 좋은 성능을 낸다.
    => SA와 tabu를 같이 해보아도 tabu only보다 좋은 성능이 잘 나지 않는다.
	=> SA가 들어가면 적절한 파라미터 찾기가 힘듬.

그 외.
	그림그리는 것.

궁금한 것.
    1번 데모 ppt 제출해야 하나?
    sa가 포함되지 않은 tabu만으로도 데모할 수 있나?

면담결과
    1. 핵심 아이디어를 가져야한다.
    2. 스케일러빌리티를 고려할 수 있어야 한다.
    3. Greedy / DP / D&C / B&B 와 같은 알고리즘을 적용해볼 수도 있다.
    4. 랜덤으로 이웃해를 고르는 것이 배제해야할 방법일수도.
    5. 데모 PPT 제출해야 한다.
    6. 로컬 랜덤 보다는 방향성을 고려하는 것을 원함

권 - 최 - 윤 : 디바이드 엔 컨쿼로 로컬 옵티마를 찾아 그들을 엮는다
최 : 밀도를 중점으로 묶을까>
권 : 군집화 알고리즘을 찾는다
태 : 재귀적인 방법으로 진행하고 싶음
윤 : 오버헤드가 많을 것으로 보임
